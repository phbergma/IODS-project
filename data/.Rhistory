2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
rm(srh.dag)
?str
str(framingham)
library(Epi)
install.packages("Epi")
library(Epi)
library(plyr)
install.packages("plyr")
install.packages("survival")
library(survival)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, sysbp))
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.1st <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.3rd <- within(subset(framingham, period==4, select=c(randid, time)), {
time.3rd <- time
rm(time)
})
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevsrtk==0,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- merge(case.id1, case.id2)
uusi <- merge(case.id1, case.id2, by="randid")
uusi <- merge(framingham, case.id1)
uusi <- merge(framingham, case.id2)
uusi1 <- merge(framingham, case.id1, by="randid")
rm(case.id)
rm(time.3rd)
rm(uusi)
rm(uusi1)
View(case.id1)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid,timecvd)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0)
uusi1 <- merge(case.id1, case.id2, by="randid")
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
rm(uusi1)
uusi <- rbind(case.id1, case.id2)
load("~/SMIPH/framingham.Rdata")
attach(framingham)
names(framingham)
11627/4439
library(dagR)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
str(framingham)
library(Epi)
library(plyr)
library(survival)
#Control cases
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- rbind(case.id1, case.id2)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- c("age", "sex", "cursmoke")
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", age, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", age, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(age, o.p, r.p, "\n")
library(survival)
p
)
library(survival)
d <- subset(framingham, time==0 & prevchd==0 & prevmi==0 & prevstrk==0)
res <- coxph(Surv(timecvd, cvd) ~ sysbp, data=d)
summary(res)
res2 <- coxph(Surv(timecvd, cvd) ~ sysbp + age, data=d)
summary(res2)
res3 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex, data=d)
summary(res3)
res4 <- coxph(Surv(timecvd, cvd) ~ sysbp + cursmoke, data=d)
summary(res4)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex, data=d)
summary(res5)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + cursmoke, data=d)
summary(res5)
res6 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex + cursmoke, data=d)
summary(res6)
res7 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex + cursmoke, data=d)
summary(res7)
cox.zph(res)
cox.zph(res7)
res <- coxph(Surv(time, totchol) ~ age, data=d)
names(framingham)
res <- coxph(Surv(time, totchol) ~ age, data=d)
res <- coxph(Surv(timecvd, totchol) ~ age, data=d)
res
res8 <- coxph(Surv(time, totchol) ~ age, data=d)
res8 <- coxph(Surv(time, cvd) ~ age, data=d)
summary(res8)
reg0 <- survreg(Surv(time, age, totchol) ~ 1, data=d)
summary(reg0)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d, dist="exponential")
summary(totchol)
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(dplyr)
install.packages("plyr")
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(plyr)
#finding the control group by using frequency sampling
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(framingham)
casedata <- merge(case.id, framingham, by="randid")
casedata <- merge(case.id2, framingham, by="randid")
casedata <- merge(case.id1, framingham, by="randid")
View(case.id1)
controldata <- merge(control.id, framingham, by="randid")
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(case.id1)
View(casedata)
install.packages("rmarkdown")
library(tidyr); library(dplyr); library(ggplot2)
install.packages('tidyr')
library(tidyr)
setwd("C:/Users/Paula/Documents/GitHub/IODS-project/data")
alc<-read.table("alc.csv",header=T,sep=",")
names(alc)
library(ggplot2)
library(dplyr)
library(GGally)
myvars<-c("high_use","Pstatus","age","studytime","absences")
alc1<-alc[myvars]
gather(alc1) %>% glimpse
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
gather(alc1) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
attach(alc)
table(high_use,Pstatus)
latex(tabular(high_use ~Format(digits=2)*Pstatus,data=alc))
install.packages("tables")
library(tables)
latex(tabular(high_use ~Format(digits=2)*Pstatus,data=alc))
t<-latex(tabular(high_use ~Format(digits=2)*Pstatus,data=alc))
print(t)
install.packages("xtable")
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
xtable(alc$high_use,alc$Pstatus)
data=alc
xtable(alc$high_use,alc$Pstatus)
data=alc
xtable(alc[c("high_use","Pstatus"),])
install.packages("gmodels")
library(gmodels)
CrossTable(alc$high_use, alc$Pstatus)
ct <- CrossTable(alc$high_use, alc$Pstatus, expected=TRUE, format="SPSS", digits=1)
ct #display crosstab on screen
?CrossTable
ct <- CrossTable(alc$high_use, alc$Pstatus, expected=TRUE, format="SAS", digits=1)
options(xtable.html.table.attributes =
list(style=sprintf("style='%s'",
paste("border:0",
"border-top: 1px solid grey",
"border-bottom: 1px solid grey",
sep="; "))))
print(xtable(alc$high_use, alc$Pstatus, caption="An xtable example"), type="html", include.rownames = FALSE)
table(high_use,Pstatus)
chisq(t)
chi.sq(t)
chisq.test(t)
?chisq.test
chisq.test(high_use,Pstatus)
ggplot(alc, aes(studytime, fill = high_use)) +
geom_bar(stat="identity", position = "dodge")
ggplot(alc, aes(studytime, count,fill = high_use)) +
geom_bar(stat="identity", position = "dodge")
ggplot(alc, aes(studytime, count(studytime),fill = high_use)) +
geom_bar(stat="identity", position = "dodge")
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
opts(title="Examplary Grouped Barplot")
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge")
ggplot(alc, aes(high_use, Pstatus))+
geom_raster(aes(fill = high_use))+
labs(title ="Heat Map", x = "Pstatus", y = "high_use")+
scale_fill_continuous(name = "high_use")
ggplot(alc, aes(absences, age))+
geom_raster(aes(fill = age))+
labs(title ="Heat Map", x = "absences", y = "age")+
scale_fill_continuous(name = "age")
myvars<-c("high_use","Pstatus")
alc1<-alc[myvars]
# use gather() to gather columns into key-value pairs and then glimpse() at the resulting data
gather(alc1) %>% glimpse
bp<- gather(alc1) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
pie <- bp + coord_polar("y", start=0)
pie
?coord_polar
?facet_wrap
bp<- gather(alc1) %>% ggplot(aes(value)) + facet_wrap("key") + geom_bar()
pie <- bp + coord_polar("y", start=0)
pie
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about studytime grouped by high_use")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about studytime grouped by high_use")+ xtitle("Study time") + ytitle("Frequancy") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about studytime grouped by high_use")+ x.title("Study time") + y.title("Frequancy") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about studytime grouped by high_use")+ x.label("Study time") + y.label("Frequancy") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
ggplot(alc, aes(studytime, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about studytime grouped by high_use")+ xlab("Study time") + ylab("Frequancy") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
ggplot(alc, aes(age, fill = high_use)) +
stat_density(aes(y = ..density..), position = "identity", color = "black", alpha = 0.5)
ggplot(alc, aes(age, fill=high_use)) + geom_bar(position="dodge") +
ggtitle("Barplot about age grouped by high_use")+ xlab("Age") + ylab("Frequency") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),
axis.title= element_text(hjust = 0.5,size=14))
mymodel1 <- glm(high_use~Pstatus+age+studytime+absences,data=alc,family="binomial")
#Print out a summary of the model
summary(mymodel1)
coef(mymodel1)
(exp(4))/(1+(exp(4)))
(exp(8))/(1+(exp(8)))
(exp(12))/(1+(exp(12)))
typeof(Pstatus)
class(Pstatus)
-3.21051 + 0.11619
#Compute odds ratios (OR)
OR<-coef(mymodel1)%>%exp
# compute confidence intervals (CI)
CI<-confint(mymodel1)%>%exp
# print out the odds ratios with their confidence intervals
cbind(OR,CI)
exp(0.17890859)
exp(0.11619)
mymodel2<-glm(high_use~studytime+absences+sex,data=alc,family="binomial")
probabilities<-predict(mymodel2,type="response")
alc<-mutate(alc,probability=probabilities)
#Use the probabilities to make a prediction of high_use
alc<-mutate(alc,prediction=probability>0.5)
#Tabulate the target variable versus the predictions
table(high_use=alc$high_use,prediction=alc$prediction)
g<-ggplot(alc,aes(x=probability,y=high_use,col=prediction)) + geom_point()
g
t<-table(high_use=alc$high_use,prediction=alc$prediction)%>%prop.table%>%addmargins
prop<-t%>%prop.table
t<-table(high_use=alc$high_use,prediction=alc$prediction)%>%prop.table%>%addmargins
t
install.packages("boot")
loss_func<-function(class,prob){
n_wrong<-abs(class-prob)>0.5
mean(n_wrong)
}
loss_func(alc$high_use,alc$probability)
library(boot)
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv
cv$delta[1]
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv$delta[1]
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv$delta[1]
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv$delta[1]
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv$delta[1]
cv<-cv.glm(data=alc,cost=loss_func,glmfit=mymodel2,K=10)
cv$delta[1]
?row.names
?read.csv
