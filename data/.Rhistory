"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  2,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
rm(srh.dag)
?str
str(framingham)
library(Epi)
install.packages("Epi")
library(Epi)
library(plyr)
install.packages("plyr")
install.packages("survival")
library(survival)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, sysbp))
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.1st <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.3rd <- within(subset(framingham, period==4, select=c(randid, time)), {
time.3rd <- time
rm(time)
})
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevsrtk==0,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- merge(case.id1, case.id2)
uusi <- merge(case.id1, case.id2, by="randid")
uusi <- merge(framingham, case.id1)
uusi <- merge(framingham, case.id2)
uusi1 <- merge(framingham, case.id1, by="randid")
rm(case.id)
rm(time.3rd)
rm(uusi)
rm(uusi1)
View(case.id1)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid,timecvd)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0)
uusi1 <- merge(case.id1, case.id2, by="randid")
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
rm(uusi1)
uusi <- rbind(case.id1, case.id2)
load("~/SMIPH/framingham.Rdata")
attach(framingham)
names(framingham)
11627/4439
library(dagR)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
str(framingham)
library(Epi)
library(plyr)
library(survival)
#Control cases
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- rbind(case.id1, case.id2)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- c("age", "sex", "cursmoke")
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", age, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", age, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(age, o.p, r.p, "\n")
library(survival)
p
)
library(survival)
d <- subset(framingham, time==0 & prevchd==0 & prevmi==0 & prevstrk==0)
res <- coxph(Surv(timecvd, cvd) ~ sysbp, data=d)
summary(res)
res2 <- coxph(Surv(timecvd, cvd) ~ sysbp + age, data=d)
summary(res2)
res3 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex, data=d)
summary(res3)
res4 <- coxph(Surv(timecvd, cvd) ~ sysbp + cursmoke, data=d)
summary(res4)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex, data=d)
summary(res5)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + cursmoke, data=d)
summary(res5)
res6 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex + cursmoke, data=d)
summary(res6)
res7 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex + cursmoke, data=d)
summary(res7)
cox.zph(res)
cox.zph(res7)
res <- coxph(Surv(time, totchol) ~ age, data=d)
names(framingham)
res <- coxph(Surv(time, totchol) ~ age, data=d)
res <- coxph(Surv(timecvd, totchol) ~ age, data=d)
res
res8 <- coxph(Surv(time, totchol) ~ age, data=d)
res8 <- coxph(Surv(time, cvd) ~ age, data=d)
summary(res8)
reg0 <- survreg(Surv(time, age, totchol) ~ 1, data=d)
summary(reg0)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d, dist="exponential")
summary(totchol)
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(dplyr)
install.packages("plyr")
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(plyr)
#finding the control group by using frequency sampling
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(framingham)
casedata <- merge(case.id, framingham, by="randid")
casedata <- merge(case.id2, framingham, by="randid")
casedata <- merge(case.id1, framingham, by="randid")
View(case.id1)
controldata <- merge(control.id, framingham, by="randid")
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(case.id1)
View(casedata)
install.packages("rmarkdown")
setwd("C:/Users/Paula/Documents/GitHub/IODS-project/data")
human<-read.table("human.csv",header=T)
human<-read.csv("human.csv",header=T)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
library(dplyr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
library(stringr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
class(human$GNI)
human$GNI<-str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
class(human$GNI)
names(human)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
View(gii)
View(hd)
#Exclude unneeded variables: keep only the columns matching the following
#variable names (described in the meta file above):  "cntr", "Pop2edR",
#"LFPRMR", "EYE", "LEatB", "GNI", "MatMort", "AdBirthr", "RepParl"
myvars<-("cntr", "Pop2edR", "LFPRMR", "EYE", "LEatB", "GNI", "MatMort", "AdBirthr", "RepParl")
myvars<-c("cntr", "Pop2edR", "LFPRMR", "EYE", "LEatB", "GNI", "MatMort", "AdBirthr", "RepParl")
human1<-human[myvars]
human2<-na.omit(human1)
table(human2$cntr)
comp<-complete.cases(human1)
comp
# print out the data along with a completeness indicator as the last column
data.frame(human1[-1], comp = comp)
# filter out all rows with NA values
human_ <- filter(human1, comp==TRUE)
table(human2$cntr)
View(human2)
last <- nrow(human2) - 7
human_ <- human2[1:last, ]
rownames(human_) <- human_$cntr
human_ <- select(human_, -cntr)
View(human)
write.table("human.csv",human_,row.names=T)
write.table(human_,"human.csv",row.names=T)
human_testi<-read.csv("human.csv",header=T)
View(human_testi)
human_testi<-read.csv("human.csv",header=T,sep="")
View(human_testi)
human<-read.csv("human.csv",header=T,sep="")
human<-read.csv("human.csv",header=T,sep="")
dim(human)
str(human)
library(tidyr); library(dplyr); library(ggplot2)
gather(human) %>% glimpse
gather(human) %>% ggplot(aes(value,fill="#99999",alpha=0.3)) + facet_wrap("key", scales = "free") +
geom_density() +
ggtitle("Density plots of the variables in the human-data") +
theme(plot.title = element_text(hjust = 0.5,size=16,face='bold'),legend.position="none")
library("GGally")
p2 <- ggpairs(human,
lower = list(combo = wrap("facethist", bins = 20))) +
ggtitle("All variables of human-data against each other") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
p2
human_std <- scale(human)
summary(human_std)
apply(human_std,2,sd)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "seagreen4"))
biplot(pca_human, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "seagreen4"),main="Principal component representation of variables")
biplot(pca_human, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "blue"),main="Principal component representation of variables")
```
p2 <- ggpairs(human,
lower = list(combo = wrap("facethist", bins = 20))) +
ggtitle("All variables of human-data against each other") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
p2
pca_human1 <- prcomp(human)
biplot(pca_human1, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "blue"),main="Principal component representation of variables.")
pca_human1 <- prcomp(human)
pca_human1
summary(pca_human1)
pca_pr <- round(100*pca_human1$importance[2, ], digits = 1)
pca_pr
pca_human1 <- prcomp(human)
pca_human1
summary(pca_human1)
pca_pr <- round(100*pca_human1$importance[2, ], digits = 1)
# print out the percentages of variance
pca_pr
pca_human1b<-summary(pca_human1)
pca_pr <- round(100*pca_human1b$importance[2, ], digits = 1)
pca_pr
View(human)
summary(human$GNI)
human_std <- scale(human)
#Print out summaries and standard deviations of the standardized variables
summary(human_std)
apply(human_std,2,sd)
#Perform principal component analysis (with the SVD method)
pca_human2 <- prcomp(human_std)
pca_human2
pca_human2b<-summary(pca_human2)
pca_pr2 <- round(100*pca_human2b$importance[2, ], digits = 1)
#Print out the percentages of variance
pca_pr2
biplot(pca_human2, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "blue"),main="Principal component representation of variables.\n Standardized human-data")
p2 <- ggpairs(human,
lower = list(combo = wrap("facethist", bins = 20))) +
ggtitle("All variables of human-data against each other") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
p2
biplot(pca_human2, choices = 1:2,cex = c(0.8, 1),col = c("tomato", "blue"),main="Principal component representation of variables.\n Standardized human-data")
library(FactoMineR)
install.packages("FactoMineR")
library("FactoMineR")
tea<-FactoMineR('tea')
tea<-data('tea')
tea<-data(tea)
data(tea)
dim(tea)
str(tea)
?tea
gather(tea) %>% glimpse
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
```
gather(tea) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value)) + geom_bar() + facet_wrap("key", scales = "free") + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 4))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 5))
names(tea)
tea_new<-tea[,-19]
View(tea_new)
mca <- MCA(tea, graph = FALSE)
mca <- MCA(tea_new, graph = FALSE)
#Summary of the model
summary(mca)
plot(mca, invisible=c("ind"),habillage = "quali")
plot.MCA(mca, invisible=c("var","quali.sup"), cex=0.7)
plot.MCA(mca, invisible=c("ind","quali.sup"), cex=0.7)
plot.MCA(mca, invisible=c("ind"))
plot.MCA(mca, invisible=c("ind", "var"))
level.ventil
install.packages(factoextra)
install.packages("factoextra"")
böö
lkajdfjc
mean(b)
q()
install.packages("factoextra")
install.packages("factoextra")
library(factoextra)
install.packages("devtools")
library(devtools)
p <- fviz_mca_ind(mca, label="none", habillage=grp,
addEllipses=TRUE, ellipse.level=0.95)
p <- fviz_mca_ind(mca, label="none", habillage="quali",
addEllipses=TRUE, ellipse.level=0.95)
