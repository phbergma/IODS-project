"sex"),
arcs = c(
0, -1, # exposure (cursmoke) --> outcome (cvd)
0,  1,
0,  2,
2,  1,
1, -1,
2, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "cursmoke",
covs = rep(1, 2),
cov.names = c("age",
"sex"),
arcs = c(
0, -1, # exposure (cursmoke) --> outcome (cvd)
0,  1,
1,  0,
0,  2,
2,  1,
1, -1,
2, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "cursmoke",
covs = rep(1, 2),
cov.names = c("age",
"sex"),
arcs = c(
0, -1, # exposure (cursmoke) --> outcome (cvd)
0,  1,
1,  0,
0,  2,
2,  1,
1, -1,
2, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=5)
?noxy
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  2,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
srh.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(srh.dag(), noxy=2)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
rm(srh.dag)
?str
str(framingham)
library(Epi)
install.packages("Epi")
library(Epi)
library(plyr)
install.packages("plyr")
install.packages("survival")
library(survival)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, sysbp))
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.1st <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st, time.2nd)
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.3rd <- within(subset(framingham, period==4, select=c(randid, time)), {
time.3rd <- time
rm(time)
})
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevsrtk==0,
select=randid)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- merge(case.id1, case.id2)
uusi <- merge(case.id1, case.id2, by="randid")
uusi <- merge(framingham, case.id1)
uusi <- merge(framingham, case.id2)
uusi1 <- merge(framingham, case.id1, by="randid")
rm(case.id)
rm(time.3rd)
rm(uusi)
rm(uusi1)
View(case.id1)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid,timecvd)
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0)
uusi1 <- merge(case.id1, case.id2, by="randid")
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
rm(uusi1)
uusi <- rbind(case.id1, case.id2)
load("~/SMIPH/framingham.Rdata")
attach(framingham)
names(framingham)
11627/4439
library(dagR)
cvd.dag <- function() {
dag <- dag.init(y.name = "cvd", x.name = "sysbp",
covs = rep(1, 3),
cov.names = c("age",
"sex", "cursmoke"),
arcs = c(
0, -1, # exposure (sysbp) --> outcome (cvd)
1,  0,
1,  3,
2,  0,
3,  0,
1, -1,
2, -1,
3, -1
)
)
return(dag)
}
dag.draw(cvd.dag(), noxy=2)
str(framingham)
library(Epi)
library(plyr)
library(survival)
#Control cases
time.1st <- within(subset(framingham, period==2, select=c(randid, time)), {
time.1st <- time
rm(time)
})
time.2nd <- within(subset(framingham, period==3, select=c(randid, time)), {
time.2nd <- time
rm(time)
})
framingham <- merge(framingham, time.1st)
framingham <- merge(framingham, time.2nd)
time.base <- within(subset(framingham, period==1, select=c(randid, time)), {
time.base <- time
rm(time)
})
case.id1 <- subset(framingham, timecvd>0 & timecvd < time.1st &
period==1 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
case.id2 <- subset(framingham, timecvd>0 & timecvd < time.2nd &
period==2 & prevchd==0 & prevmi==0 & prevstrk==0,
select=randid)
uusi <- rbind(case.id1, case.id2)
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
## Unadjusted unmatched case-control estimate and (asymptotic)
## variance estimate:
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
for (i in 1:ncol(framingham))
attr(framingham[,i], "names") <- NULL
var.v <- c("age", "sex", "cursmoke")
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
var.v <- list(age, sex, cursmoke)
for (i in var.v) {
## Association with the risk factor:
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", i, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", i, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(i, o.p, r.p, "\n")
}
}
r.p <- eval(parse(text=paste0("with(framingham, fisher.test(sysbp, ", age, ")$p.value)")))
## Association with the outcome:
o.p <- eval(parse(text=paste0("with(framingham, fisher.test(cvd, ", age, ")$p.value)")))
if (o.p < 0.10 && r.p < 0.10) {
## Choose variables with both p-values below 0.10:
cat(age, o.p, r.p, "\n")
library(survival)
p
)
library(survival)
d <- subset(framingham, time==0 & prevchd==0 & prevmi==0 & prevstrk==0)
res <- coxph(Surv(timecvd, cvd) ~ sysbp, data=d)
summary(res)
res2 <- coxph(Surv(timecvd, cvd) ~ sysbp + age, data=d)
summary(res2)
res3 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex, data=d)
summary(res3)
res4 <- coxph(Surv(timecvd, cvd) ~ sysbp + cursmoke, data=d)
summary(res4)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex, data=d)
summary(res5)
res5 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + cursmoke, data=d)
summary(res5)
res6 <- coxph(Surv(timecvd, cvd) ~ sysbp + sex + cursmoke, data=d)
summary(res6)
res7 <- coxph(Surv(timecvd, cvd) ~ sysbp + age + sex + cursmoke, data=d)
summary(res7)
cox.zph(res)
cox.zph(res7)
res <- coxph(Surv(time, totchol) ~ age, data=d)
names(framingham)
res <- coxph(Surv(time, totchol) ~ age, data=d)
res <- coxph(Surv(timecvd, totchol) ~ age, data=d)
res
res8 <- coxph(Surv(time, totchol) ~ age, data=d)
res8 <- coxph(Surv(time, cvd) ~ age, data=d)
summary(res8)
reg0 <- survreg(Surv(time, age, totchol) ~ 1, data=d)
summary(reg0)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d)
reg0 <- survreg(Surv(age, totchol) ~ 1, data=d, dist="exponential")
summary(totchol)
my.cc.log.or <- function(n01, n11, n00, n10) log(n11 / n01 / (n10 / n00))
my.cc.log.or.var <- function(n01, n11, n00, n10) 1/n11 + 1/n01 + 1/n10 + 1/n00
with(framingham, table(cvd, cursmoke))
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(dplyr)
install.packages("plyr")
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
library(plyr)
#finding the control group by using frequency sampling
framingham <- within(framingham, {
cc.group <- factor(NA, levels=c("Case", "Control", "Excluded"))
cc.group[timecvd>0 & timecvd < time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Case"
cc.group[timecvd >= time.1st & prevchd==0 & prevmi==0 & prevstrk==0] <- "Control"
## Exclude deaths before 1st follow-up point and prevalent cases:
cc.group[timedth < time.1st | prevchd==1 | prevmi==1 | prevstrk==1] <- "Excluded"
})
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(framingham)
casedata <- merge(case.id, framingham, by="randid")
casedata <- merge(case.id2, framingham, by="randid")
casedata <- merge(case.id1, framingham, by="randid")
View(case.id1)
controldata <- merge(control.id, framingham, by="randid")
control.id <- dlply(framingham,
.(agegr=cut(age, 3:7*10)),
function(x) with(x, sample(randid[cc.group=="Control"],
sum(cc.group=="Case"))))
control.id <- unlist(control.id)
View(case.id1)
View(casedata)
install.packages("rmarkdown")
setwd("C:/Users/Paula/Documents/GitHub/IODS-project")
students2014<-read-table("learning2014.csv",sep=",",header=T)
students2014<-read.table("learning2014.csv",sep=",",header=T)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
names(students2014)
p1 <- ggplot(students2014, aes(x = attitude, y = points, col=gender))
p2 <- p1 + geom_point()
p2
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p2 + ggtitle("Student's attitude versus exam points")
p4
pairs(students2014[-1],col=students2014$gender)
library(GGally)
install.packages("GGally")
library(GGally)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col=gender,alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
p <- ggpairs(students2014, mapping = aes(col=gender,alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
qplot(attitude, points, data = students2014) + geom_smooth(method = "lm")
# fit a linear model
my_model <- lm(points ~ attitude, data = students2014)
# print out a summary of the model
summary(my_model)
p
p5 <- p+ggtitle("All variables against each other")
+ theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
p5 <- p+ggtitle("All variables against each other") + theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
p5
my_model <- lm(points ~ gender+age+attitude+surf+stra, data = students2014)
# print out a summary of the model
summary(my_model)
my_model <- lm(points ~ gender+age+attitude+stra, data = students2014)
# print out a summary of the model
summary(my_model)
my_model <- lm(points ~ gender+attitude+stra, data = students2014)
# print out a summary of the model
summary(my_model)
my_model <- lm(points ~ attitude+stra, data = students2014)
# print out a summary of the model
summary(my_model)
my_model <- lm(points ~ attitude+stra+surf, data = students2014)
# print out a summary of the model
summary(my_model)
my_model <- lm(points ~ attitude, data = students2014)
# print out a summary of the model
summary(my_model)
par(mfrow=c(2,2))
plot(my_model,which=c(1,2,5))
# draw a scatter plot matrix of the variables in learning2014.
# [-1] excludes the first column (gender)
pairs(students2014[-1],col=students2014$gender)
pairs(students2014[-1],col=students2014$gender,main="Scatterplot of all variables in the data")
p <- ggpairs(students2014, mapping = aes(col=gender,alpha=0.3),
lower = list(combo = wrap("facethist", bins = 20))) +
ggtitle("All variables against each other") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
# draw the plot
p
qplot(attitude, points, data = students2014) + geom_smooth(method = "lm") +
ggtitle("Attitudes versus exam points") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
qplot(attitude, points, data = students2014) + geom_smooth(method = "lm") +
ggtitle("Attitudes versus exam points") +
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'),
axis.title= element_text(hjust = 0.5,size=16))
my_model1 <- lm(points ~ attitude+stra+surf, data = students2014)
summary(my_model1)
my_model2<-lm(points~attitude+stra,data=students2014)
summary(my_model2)
my_model2<-lm(points~attitude+surf,data=students2014)
summary(my_model2)
my_model2<-lm(points~attitude+stra,data=students2014)
summary(my_model2)
my_model3<-lm(points~attitude,data=students2014)
summary(my_model3)
?ggplot2
?qplot
